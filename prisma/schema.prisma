// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Affiliate {
  id                  String    @id @default(cuid())
  stakeUsername       String    @unique // Ex: ************S10
  name                String    // Nom réel ou pseudo de l'affilié
  email               String?   
  
  // Commissions
  startingCommission  Decimal   @default(0) @db.Decimal(10, 2)  // Commission au moment de l'ajout
  lastPaidCommission  Decimal   @default(0) @db.Decimal(10, 2)  // Commission au moment du dernier paiement
  currentCommission   Decimal   @default(0) @db.Decimal(10, 2)  // Commission actuelle
  
  // Total misé
  currentTotalBet     Decimal   @default(0) @db.Decimal(10, 2)  // Total misé actuel
  
  // Montants
  pendingAmount       Decimal   @default(0) @db.Decimal(10, 2)  // À payer
  paidAmount          Decimal   @default(0) @db.Decimal(10, 2)  // Total payé historique
  
  // Dates
  createdAt           DateTime  @default(now())
  lastUpdated         DateTime? // Dernière mise à jour manuelle
  
  // Statut
  isActive            Boolean   @default(true)
  
  // Relations
  commissionHistory   CommissionHistory[]
  payments            Payment[]

  @@index([stakeUsername])
  @@index([email])
}

model CommissionHistory {
  id                   String    @id @default(cuid())
  affiliateId          String
  affiliate            Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  
  // Valeurs avant/après
  previousTotalBet     Decimal   @db.Decimal(10, 2)
  newTotalBet          Decimal   @db.Decimal(10, 2)
  previousCommission   Decimal   @db.Decimal(10, 2)
  newCommission        Decimal   @db.Decimal(10, 2)
  
  // Calculs
  commissionDifference Decimal   @db.Decimal(10, 2) // Nouvelle - Ancienne
  affiliateShare       Decimal   @db.Decimal(10, 2) // 50% de la différence
  
  // Méthode
  method               String    @default("MANUAL") // MANUAL ou AUTO (futur)
  
  // Date
  calculatedAt         DateTime  @default(now())

  @@index([affiliateId])
  @@index([calculatedAt])
}

model Payment {
  id               String    @id @default(cuid())
  affiliateId      String
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  
  amount           Decimal   @db.Decimal(10, 2)
  paymentMethod    String    @default("CRYPTO") // CRYPTO, VIREMENT, etc.
  
  // Détails de transaction
  transactionId    String?   // ID de transaction unique
  note             String?   // Note du paiement
  
  paidAt           DateTime  @default(now())

  @@index([affiliateId])
  @@index([paidAt])
}

model SystemLog {
  id          String    @id @default(cuid())
  action      String    // MANUAL_UPDATE, AFFILIATE_ADDED, etc.
  details     String?   // Détails de l'action
  createdAt   DateTime  @default(now())

  @@index([action])
  @@index([createdAt])
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  role        String    @default("USER") // ADMIN, USER
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([email])
}