import { PrismaClient } from '@prisma/client';
import jwt from 'jsonwebtoken';

const prisma = new PrismaClient();

// V√©rifier le token admin
async function verifyAdminToken(token) {
  if (!token) return false;
  
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
    // Accepter les deux formats : role === 'ADMIN' OU isAdmin === true
    return decoded.role === 'ADMIN' || decoded.isAdmin === true;
  } catch (error) {
    return false;
  }
}

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // V√©rifier l'authentification
    const authHeader = req.headers.authorization;
    const token = authHeader?.replace('Bearer ', '');
    
    const isAdmin = await verifyAdminToken(token);
    if (!isAdmin) {
      return res.status(401).json({ error: 'Non autoris√©' });
    }

    const { updates } = req.body;

    if (!updates || !Array.isArray(updates)) {
      return res.status(400).json({ error: 'Donn√©es invalides' });
    }

    console.log(`üìä Mise √† jour manuelle pour ${updates.length} affili√©s`);

    let updatedCount = 0;
    const errors = [];
    const paymentsToMake = []; // Liste des paiements √† effectuer

    // Traiter chaque mise √† jour
    for (const update of updates) {
      try {
        const { affiliateId, totalBet, totalCommission } = update;

        // R√©cup√©rer l'affili√© actuel
        const affiliate = await prisma.affiliate.findUnique({
          where: { id: affiliateId }
        });

        if (!affiliate) {
          errors.push(`Affili√© ${affiliateId} introuvable`);
          continue;
        }

        // Calculer la diff√©rence de commission
        const lastPaidCommission = parseFloat(affiliate.lastPaidCommission) || 0;
        const newCommission = parseFloat(totalCommission) || 0;
        const commissionDifference = newCommission - lastPaidCommission;

        console.log(`üßÆ ${affiliate.name}:`);
        console.log(`   Commission actuelle: ${affiliate.currentCommission}‚Ç¨ ‚Üí ${newCommission}‚Ç¨`);
        console.log(`   Derni√®re pay√©e: ${lastPaidCommission}‚Ç¨`);
        console.log(`   Diff√©rence: ${commissionDifference}‚Ç¨`);

        // Mettre √† jour les valeurs actuelles ET lastPaidCommission (toujours)
        await prisma.affiliate.update({
          where: { id: affiliateId },
          data: {
            currentTotalBet: totalBet,
            currentCommission: newCommission,
            lastPaidCommission: newCommission, // On met toujours √† jour avec la derni√®re valeur
            lastUpdated: new Date()
          }
        });

        // Si diff√©rence positive, pr√©parer le paiement
        if (commissionDifference > 0) {
          const affiliateShare = commissionDifference * 0.5; // 50%

          // Cr√©er un historique
          await prisma.commissionHistory.create({
            data: {
              affiliateId: affiliateId,
              previousTotalBet: affiliate.currentTotalBet || 0,
              newTotalBet: totalBet,
              previousCommission: affiliate.currentCommission || 0,
              newCommission: newCommission,
              commissionDifference: commissionDifference,
              affiliateShare: affiliateShare,
              calculatedAt: new Date(),
              method: 'MANUAL'
            }
          });

          // Ajouter √† la liste des paiements √† faire
          paymentsToMake.push({
            affiliateId: affiliate.id,
            affiliateName: affiliate.name,
            affiliateEmail: affiliate.email,
            amount: affiliateShare,
            commission: newCommission,
            difference: commissionDifference
          });

          updatedCount++;
          console.log(`‚úÖ ${affiliate.name}: ${affiliateShare.toFixed(2)}‚Ç¨ √† payer`);
        } else {
          updatedCount++;
          console.log(`‚úÖ ${affiliate.name}: Valeurs mises √† jour (pas de nouvelle commission)`);
        }

      } catch (error) {
        console.error(`‚ùå Erreur pour l'affili√© ${update.affiliateId}:`, error);
        errors.push(`Erreur pour l'affili√© ${update.affiliateId}: ${error.message}`);
      }
    }

    // Cr√©er un snapshot global pour garder une trace
    await prisma.systemLog.create({
      data: {
        action: 'MANUAL_UPDATE',
        details: `Mise √† jour manuelle de ${updatedCount} affili√©s - ${paymentsToMake.length} paiements √† effectuer`,
        createdAt: new Date()
      }
    });

    console.log(`\n‚úÖ Mise √† jour termin√©e: ${updatedCount}/${updates.length} affili√©s trait√©s`);
    console.log(`üí∞ ${paymentsToMake.length} paiements √† effectuer`);

    return res.status(200).json({
      success: true,
      message: 'Mise √† jour r√©ussie',
      updated: updatedCount,
      paymentsToMake: paymentsToMake, // Retourner la liste des paiements
      errors: errors.length > 0 ? errors : undefined
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour:', error);
    return res.status(500).json({ 
      error: 'Erreur lors de la mise √† jour',
      details: error.message 
    });
  } finally {
    await prisma.$disconnect();
  }
}